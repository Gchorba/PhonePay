<?phprequire_once('lib/Stripe.php');class Paynow extends Controller{    private $ivr_message;    function __construct() {        $this->ivr_message=(object) parse_ini_file('application/ivr_message.ini');    }            function index(){        $params=$this->urlPara();        $this->loadModel('transactions');        $this->loadModel('orders_model');        $orders_model=new Orders_model();        $txns=new Transactions();        $expriry= str_split($this->decript_str($params[2]),2);        $card['number']=$this->decript_str($params[1]);        $card['exp_month']=$expriry[0];        $card['exp_year']=$expriry[1];                $order=$txns->get_order_data($params[0]);        Stripe::setApiKey(Config::$secret_key);        try {			$test=Stripe_Charge::create(	array(	 "amount" => $order['amount']*100,	 "currency" => "usd",	 "card" => $card, 	 "description" => "Charge for test@example.com" ));        $charge = $test->__toArray(true);	        $strip_id=$charge['id'];               $notes['amount']=$charge['amount'];        $notes['currency']=$charge['currency'];        $notes=json_encode($notes);        $orders_model->update_order_data($order['id'], $order['phone'], $order['amount'], 'paid');        $txns->update_transaction('completed',$strip_id,$notes,$params[0]);                $data['ivr_payment_success']= $this->ivr_message->payment_success;        $this->loadView('twiml_payemt_success',$data);        }         catch(Stripe_CardError $e) {         $strip_id="Not available";	 $body = $e->getJsonBody();	 $err = $body['error']; 	 $data['message']=$err['message'];         $data['redirect']=  Config::$base_url."/twiml/confirm_payment/".$params[0].".php";         $notes=json_encode($err);	 $txns->update_transaction('failed',$strip_id, $notes,$params[0]);         $data['ivr_payment_failed']=  $this->ivr_message->payment_failed;         $data['ivr_cancel_confirm'] = $this->ivr_message->cancel_confirm;         $this->loadView('twiml_payemt_failed',$data);        }             }         function  decript_str($str){        $str= strrev($str);        $str=str_split($str);        $string='';        foreach ($str as $key=>$value) {            if ($key % 2 == 0) {                $string.=$value;              }        }        return $string;    }	function refund(){		$stripe_id=  user_in_filter($_POST['stripe_id']);        $this->loadModel('transactions');		$om=new Transactions();						Stripe::setApiKey(Config::$secret_key);		$ch = Stripe_Charge::retrieve($stripe_id); 		try{			$re = $ch->refunds->create();				        $response['status']=TRUE;		        $response['message']="Refunded";		}catch(Stripe_InvalidRequestError $e){			$response['status']=FALSE;		        $response['message']="Unable to refund.";		}				if( $response['status']){			$om->refund($stripe_id);		}	        echo json_encode($response);		 	}	        //end of class        }